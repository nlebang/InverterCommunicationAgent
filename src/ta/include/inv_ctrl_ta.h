/*
 * Copyright Â© 2017 Utkarsh Agrawal <utkarsh.agrawal@wsu.edu> <uautkarsh@gmail.com>
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef INV_CTRL_TA_H
#define INV_CTRL_TA_H

/* SigGen15_186-2.txt line 9 mod 1024 */
// n
static const uint8_t ac_siggen15_186_2_modulus[] = {
  0xc8, 0xa2, 0x06, 0x91, 0x82, 0x39, 0x4a, 0x2a, 0xb7, 0xc3, 0xf4, 0x19,
  0x0c, 0x15, 0x58, 0x9c, 0x56, 0xa2, 0xd4, 0xbc, 0x42, 0xdc, 0xa6, 0x75,
  0xb3, 0x4c, 0xc9, 0x50, 0xe2, 0x46, 0x63, 0x04, 0x84, 0x41, 0xe8, 0xaa,
  0x59, 0x3b, 0x2b, 0xc5, 0x9e, 0x19, 0x8b, 0x8c, 0x25, 0x7e, 0x88, 0x21,
  0x20, 0xc6, 0x23, 0x36, 0xe5, 0xcc, 0x74, 0x50, 0x12, 0xc7, 0xff, 0xb0,
  0x63, 0xee, 0xbe, 0x53, 0xf3, 0xc6, 0x50, 0x4c, 0xba, 0x6c, 0xfe, 0x51,
  0xba, 0xa3, 0xb6, 0xd1, 0x07, 0x4b, 0x2f, 0x39, 0x81, 0x71, 0xf4, 0xb1,
  0x98, 0x2f, 0x4d, 0x65, 0xca, 0xf8, 0x82, 0xea, 0x4d, 0x56, 0xf3, 0x2a,
  0xb5, 0x7d, 0x0c, 0x44, 0xe6, 0xad, 0x4e, 0x9c, 0xf5, 0x7a, 0x43, 0x39,
  0xeb, 0x69, 0x62, 0x40, 0x6e, 0x35, 0x0c, 0x1b, 0x15, 0x39, 0x71, 0x83,
  0xfb, 0xf1, 0xf0, 0x35, 0x3c, 0x9f, 0xc9, 0x91
};

//e
static const uint8_t ac_siggen15_186_2_pub_exp[] = {
  0x01, 0x00, 0x01
};

//d
static const uint8_t ac_siggen15_186_2_priv_exp[] = {
  0x5d, 0xfc, 0xb1, 0x11, 0x07, 0x2d, 0x29, 0x56, 0x5b, 0xa1, 0xdb, 0x3e,
  0xc4, 0x8f, 0x57, 0x64, 0x5d, 0x9d, 0x88, 0x04, 0xed, 0x59, 0x8a, 0x4d,
  0x47, 0x02, 0x68, 0xa8, 0x90, 0x67, 0xa2, 0xc9, 0x21, 0xdf, 0xf2, 0x4b,
  0xa2, 0xe3, 0x7a, 0x3c, 0xe8, 0x34, 0x55, 0x50, 0x00, 0xdc, 0x86, 0x8e,
  0xe6, 0x58, 0x8b, 0x74, 0x93, 0x30, 0x35, 0x28, 0xb1, 0xb3, 0xa9, 0x4f,
  0x0b, 0x71, 0x73, 0x0c, 0xf1, 0xe8, 0x6f, 0xca, 0x5a, 0xee, 0xdc, 0x3a,
  0xfa, 0x16, 0xf6, 0x5c, 0x01, 0x89, 0xd8, 0x10, 0xdd, 0xcd, 0x81, 0x04,
  0x9e, 0xbb, 0xd0, 0x39, 0x18, 0x68, 0xc5, 0x0e, 0xde, 0xc9, 0x58, 0xb3,
  0xa2, 0xaa, 0xef, 0xf6, 0xa5, 0x75, 0x89, 0x7e, 0x2f, 0x20, 0xa3, 0xab,
  0x54, 0x55, 0xc1, 0xbf, 0xa5, 0x50, 0x10, 0xac, 0x51, 0xa7, 0x79, 0x9b,
  0x1f, 0xf8, 0x48, 0x36, 0x44, 0xa3, 0xd4, 0x25
};

static const uint8_t data[] = {
  0x45, 0x6e, 0x74, 0x65, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x61,
  0x74, 0x72, 0x69, 0x78
};
// static const uint8_t data[] = {
//  0xe5, 0x67, 0xa3, 0x9a, 0xe4, 0xe5, 0xef, 0x9b, 0x68, 0x01, 0xea, 0x05,
//  0x61, 0xb7, 0x2a, 0x5d, 0x4b, 0x5f, 0x38, 0x5f, 0x05, 0x32, 0xfc, 0x9f,
//  0xe1, 0x0a, 0x75, 0x70, 0xf8, 0x69, 0xae, 0x05, 0xc0, 0xbd, 0xed, 0xd6,
//  0xe0, 0xe2, 0x2d, 0x45, 0x42, 0xe9, 0xce, 0x82, 0x6a, 0x18, 0x8c, 0xac,
//  0x07, 0x31, 0xae, 0x39, 0xc8, 0xf8, 0x7f, 0x97, 0x71, 0xef, 0x02, 0x13,
//  0x2e, 0x64, 0xe2, 0xfb, 0x27, 0xad, 0xa8, 0xff, 0x54, 0xb3, 0x30, 0xdd,
//  0x93, 0xad, 0x5e, 0x3e, 0xf8, 0x2e, 0x0d, 0xda, 0x64, 0x62, 0x48, 0xe3,
//  0x59, 0x94, 0xbd, 0xa1, 0x0c, 0xf4, 0x6e, 0x5a, 0xbc, 0x98, 0xaa, 0x74,
//  0x43, 0xc0, 0x3c, 0xdd, 0xeb, 0x5e, 0xe2, 0xab, 0x82, 0xd6, 0x01, 0x00,
//  0xb1, 0x02, 0x96, 0x31, 0x89, 0x79, 0x70, 0x27, 0x5f, 0x11, 0x9d, 0x05,
//  0xda, 0xa2, 0x22, 0x0a, 0x4a, 0x0d, 0xef, 0xba };

static const uint8_t data_out[] = {
  0x9c, 0x1e, 0x33, 0x55, 0x58, 0xa0, 0x85, 0x4f, 0x2d, 0x4e, 0x0a, 0x53,
  0x3a, 0xaa, 0xa9, 0xb3, 0x24, 0xab, 0x00, 0xfe, 0xc6, 0x37, 0xf9, 0x41,
  0x2d, 0x9e, 0x9d, 0x18, 0xd9, 0xc6, 0xdb, 0x89, 0xfc, 0x27, 0x1d, 0x53,
  0x23, 0x97, 0xae, 0xb1, 0xb5, 0x35, 0x09, 0xa1, 0xac, 0x64, 0x4e, 0x86,
  0x9a, 0x67, 0xc7, 0x35, 0x2e, 0x3c, 0x55, 0xe3, 0x98, 0xf2, 0xd0, 0x1b,
  0xb1, 0xab, 0xfa, 0x79, 0xd6, 0x29, 0x6e, 0xb7, 0xd3, 0xc9, 0xb4, 0x86,
  0xd8, 0xa5, 0x3e, 0xfb, 0x17, 0x89, 0xd3, 0x08, 0x6a, 0xed, 0x0e, 0xb2,
  0x8b, 0x52, 0xdb, 0x84, 0x37, 0x36, 0x03, 0x3a, 0xe6, 0x99, 0x30, 0xa6,
  0x7d, 0x71, 0xad, 0xe9, 0xa5, 0x2a, 0xc9, 0x50, 0xb1, 0xea, 0x8f, 0x7d,
  0x71, 0x10, 0x02, 0x5a, 0x70, 0xa5, 0x9f, 0x63, 0xc4, 0x93, 0xdb, 0xbe,
  0x1a, 0x6a, 0x55, 0xa3, 0xd9, 0x11, 0xf5, 0xf3
};
// static const uint8_t data_out[] = {
//  0x0e, 0x7c, 0xdd, 0x12, 0x1e, 0x40, 0x32, 0x3c, 0xa6, 0x11, 0x5d, 0x1e,
//  0xc6, 0xd1, 0xf9, 0x56, 0x17, 0x38, 0x45, 0x5f, 0x0e, 0x9e, 0x1c, 0xd8,
//  0x58, 0xe8, 0xb5, 0x66, 0xae, 0x2d, 0xa5, 0xe8, 0xee, 0x63, 0xd8, 0xf1,
//  0x5c, 0x3c, 0xdd, 0x88, 0x02, 0x7e, 0x13, 0x40, 0x6d, 0xb6, 0x09, 0x36,
//  0x9c, 0x88, 0xca, 0x99, 0xb3, 0x4f, 0xa1, 0x56, 0xc7, 0xee, 0x62, 0xbc,
//  0x5a, 0x39, 0x23, 0xbb, 0x5a, 0x1e, 0xda, 0xbd, 0x45, 0xc1, 0xa4, 0x22,
//  0xaa, 0xfc, 0xbb, 0x47, 0xe0, 0x94, 0x7f, 0x35, 0xcf, 0xef, 0x87, 0x97,
//  0x0b, 0x4b, 0x71, 0x31, 0x62, 0xb2, 0x19, 0x16, 0xca, 0xfb, 0x8c, 0x86,
//  0x4a, 0x3e, 0x5b, 0x9f, 0xfc, 0x98, 0x94, 0x01, 0xd4, 0xea, 0xe9, 0x92,
//  0x31, 0x2a, 0x32, 0xc5, 0xbc, 0x88, 0xab, 0xbb, 0x45, 0xf9, 0x9a, 0xc8,
//  0x85, 0xb5, 0x4d, 0x6b, 0x8e, 0x61, 0xb6, 0xec
// };

#define data_modulus ac_siggen15_186_2_modulus
#define data_pub_exp ac_siggen15_186_2_pub_exp
#define data_priv_exp ac_siggen15_186_2_priv_exp

// char filename[] = "coil";
static const char filename[] = {
  'c', 'o', 'i', 'l'
};

#define COIL_VALUE_0 1
#define COIL_VALUE_1 0xFF00


#define BIT_ADDRESS_INVERTER_STATUS 0
#define COIL_ADDRESS_INVERTER_STATUS 0x13


/****************************** COMMAND CONTROLLERS ******************************/
TEE_Result ta_seedCoil(
  void
);
TEE_Result ta_overwriteCoilWithData(
  void *coilData,
  int coilDataLen
);

TEE_Result ta_getAllCoilData(
  TEE_Param params[4]
);
TEE_Result ta_getAllCoilData_unpacked(
  void* buffer, uint32_t size,
  uint32_t *count
);
TEE_Result ta_getDataByCoilAddress(
  TEE_Param params[4]
);
TEE_Result ta_setDataByCoilAddress(
  TEE_Param params[4]
);
TEE_Result ta_verifyCoilDAta(
  TEE_Param params[4]
);
TEE_Result ta_signCoilData(
  TEE_Param params[4]
);
TEE_Result ta_sign(
  uint8_t *data, int dataLen, uint8_t *signature_ptr, int *signatureLen_ptr
);
TEE_Result ta_verify(
  uint8_t *data, int dataLen, uint8_t *signature_ptr, int signatureLen, int * signatureVerified
);
TEE_Result ta_signAndVerify(
  TEE_OperationMode mode,
  uint8_t *data, int dataLen,
  uint8_t *signature_ptr, int *signatureLen_ptr, 
  int *signatureVerified
);
bool create_key(
  uint32_t max_key_size,
  uint32_t key_type,
  TEE_Attribute *attrs, size_t num_attrs,
  TEE_ObjectHandle *handle
);

/****************************** UTIL FUNCTIONS ******************************/
int ta_getBitNumberForCoil(
  int coilAddress
);
uint8_t ta_getCoilValue(
  int bitNumber, uint8_t *coilData_ptr, int coilDataLen
);
int ta_updateCoilData(
  int bitNumber, uint8_t coilValue, uint8_t * coilData
);
void xtest_add_attr(
  size_t *attr_count, TEE_Attribute *attrs, uint32_t attr_id,
  const void *buf, size_t len
);

/****************************** PERSISTENT OBJECT FUNCTIONS ******************************/
TEE_Result ta_createPersistentObject(
  uint32_t storageId,
  void* objectID, uint32_t objectIDLen,
  uint32_t flags, TEE_ObjectHandle attributes,
  void* initialData, uint32_t initialDataLen,
  TEE_ObjectHandle *object
);
TEE_Result ta_openPersistentObject(
  uint32_t storageId,
  void* objectID, uint32_t objectIDLen,
  uint32_t flags,
  TEE_ObjectHandle *object
);
TEE_Result ta_readPersistentObject(
  TEE_ObjectHandle object,
  void* buffer, uint32_t size,
  uint32_t *count
);
TEE_Result ta_closePersistentObject(
  TEE_ObjectHandle object
);
/****************************** TRANSIENT OBJECT FUNCTIONS ******************************/
TEE_Result ta_allocateTransientObject(
  uint32_t objectType,
  uint32_t maxObjectSize,
  TEE_ObjectHandle* object
);
TEE_Result ta_populateTransientObject(
  TEE_ObjectHandle object,
  TEE_Attribute* attrs, uint32_t attrCount
);
TEE_Result ta_freeTransientObject(
  TEE_ObjectHandle object
);
/****************************** COMMON CRYPTO FUNCTIONS ******************************/
TEE_Result ta_allocateOperation(
  TEE_OperationHandle* operation,
  uint32_t algorithm,
  uint32_t mode,
  uint32_t maxKeySize
);
TEE_Result ta_freeOperation(TEE_OperationHandle operation
);
TEE_Result ta_setOperationKey(
  TEE_OperationHandle operation,
  TEE_ObjectHandle key
);
/****************************** SHA CRYPTO FUNCTIONS ******************************/
TEE_Result ta_digestDoFinal(
  TEE_OperationHandle operation,
  void* chunk, uint32_t chunkLen,
  void* hash, uint32_t* hashLen
);
/****************************** ASYMMMETRIC CRYPTO FUNCTIONS ******************************/
TEE_Result ta_asymmetricSignDigest(
  TEE_OperationHandle operation,
  TEE_Attribute* params, uint32_t paramCount,
  void* digest, uint32_t digestLen,
  void* signature, uint32_t *signatureLen
);
TEE_Result ta_asymmetricVerifyDigest(
  TEE_OperationHandle operation,
  TEE_Attribute* params, uint32_t paramCount,
  void* digest, uint32_t digestLen,
  void* signature, uint32_t signatureLen
);


#define SET_BIT(val, bitIndex) val |= (1 << bitIndex)
#define CLEAR_BIT(val, bitIndex) val &= ~(1 << bitIndex)

#endif /*INV_CTRL_TA_H*/
